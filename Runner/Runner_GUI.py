# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Runner_GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from Runner.Runner_Manager import *
import sys
import os

def enable_button(button):
    button.setEnabled(True)
    button.setStyleSheet("background-color: rgba(18, 51, 62, 100%); color: #FFFFFF; border-radius: 5px;")

def disable_button(button):
    button.setEnabled(False)
    button.setStyleSheet("background-color: rgba(18, 51, 62, 50%); color: #FFFFFF; border-radius: 5px;")


class Runner_GUI(object):
    def __init__(self, controller):
        self.controller_object = controller
        self.runner_manager = RunnerManager(self.controller_object)
        self.observations = self.controller_object.unified_list()
        if __name__ != "__main__":
            self.execute()

    def setupUi(self, Runner):
        self.runner = Runner
        Runner.setObjectName("Runner_GUI")
        Runner.resize(800, 569)
        Runner.setStyleSheet("background-color: #f4f5f7;")
        self.centralwidget = QtWidgets.QWidget(Runner)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setMinimumSize(QtCore.QSize(760, 530))
        font = QtGui.QFont()

        ###################### Labels ##########################
        self.ECELd = QtWidgets.QLabel(self.centralwidget)
        self.ECELd.setGeometry(QtCore.QRect(420, 20, 151, 21))
        font.setPointSize(14)
        self.ECELd.setFont(font)
        self.ECELd.setStyleSheet("color:black;")
        self.ECELd.setObjectName("ECELd")

        self.ABS = QtWidgets.QLabel(self.centralwidget)
        self.ABS.setStyleSheet("color:black;")
        self.ABS.setGeometry(QtCore.QRect(20, 20, 250, 21))
        self.ABS.setFont(font)
        self.ABS.setObjectName("ABS")

        #################### ABS Output ########################
        # self.ABSOutput = QtWidgets.QTextEdit(self.centralwidget)
        # self.ABSOutput.setGeometry(QtCore.QRect(20, 50, 321, 391))
        # self.ABSOutput.setObjectName("ABSOutput")
        # self.ABSOutput.setStyleSheet("background-color: #FFFFFF; border-radius: 10px; border: 1px solid #D2D6E0; color: black;")
        # self.ABSOutput.setEnabled(False)

        self.observation_list = QtWidgets.QListWidget(self.centralwidget)
        self.observation_list.setGeometry(QtCore.QRect(20, 50, 340, 391))
        self.observation_list.setObjectName("observation_list")
        self.observation_list.setStyleSheet(
            "background-color: #FFFFFF; border-radius: 10px; border: 1px solid #D2D6E0; color: black;")

        #################### ECELd Output #######################
        self.observation_output = QtWidgets.QTextEdit(self.centralwidget)
        self.observation_output.setGeometry(QtCore.QRect(435, 50, 340, 391))
        self.observation_output.setObjectName("observation_output")
        self.observation_output.setStyleSheet("background-color: #FFFFFF; border-radius: 10px; border: 1px solid #D2D6E0; color: black;")
        self.observation_output.setEnabled(False)
        

        ################### Back2Builder Button #########################
        self.back_to_builder_button = QtWidgets.QPushButton(self.centralwidget)
        self.back_to_builder_button.setGeometry(QtCore.QRect(310, 470, 150, 31))
        self.back_to_builder_button.setStyleSheet("background-color: #FFFFFF; border-radius: 10px; border: 1px solid #D2D6E0; color: black;")
        self.back_to_builder_button.setObjectName("back2Builder")
        self.back_to_builder_button.clicked.connect(self.back_to_builder)


        ###################  Save Script Button #########################
        self.save_script_button = QtWidgets.QPushButton(self.centralwidget)
        self.save_script_button.setGeometry(QtCore.QRect(520, 470, 150, 31))
        self.save_script_button.setStyleSheet("background-color: #FFFFFF; border-radius: 10px; border: 1px solid #D2D6E0; color: black;")
        self.save_script_button.setObjectName("save_script_button")
        self.save_script_button.clicked.connect(self.save_script)


        ################### Play Button #########################
        self.play_button = QtWidgets.QPushButton(self.centralwidget)
        self.play_button.setGeometry(QtCore.QRect(20, 470, 81, 31))
        self.play_button.setStyleSheet("background-color: #FFFFFF; border-radius: 10px; border: 1px solid #D2D6E0; color: black;")
        self.play_button.setObjectName("play_button")
        self.play_button.clicked.connect(self.run_scripts)

        # ################## Pause Button #########################
        # self.pauseButton = QtWidgets.QPushButton(self.centralwidget)
        # self.pauseButton.setGeometry(QtCore.QRect(110, 470, 71, 31))
        # self.pauseButton.setStyleSheet("background-color: #FFFFFF; border-radius: 10px; border: 1px solid #D2D6E0; color: black;")
        # self.pauseButton.setObjectName("pauseButton")

        # ################## Stop Button ##########################
        # self.stopButton = QtWidgets.QPushButton(self.centralwidget)
        # self.stopButton.setGeometry(QtCore.QRect(190, 470, 81, 31))
        # self.stopButton.setStyleSheet("background-color: #FFFFFF; border-radius: 10px; border: 1px solid #D2D6E0; color: black;")
        # self.stopButton.setObjectName("stopButton")

        ################## Menu Top Bar #########################
        Runner.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(Runner)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 21))
        self.menubar.setObjectName("menubar")

        self.menu_file = QtWidgets.QMenu(self.menubar)
        self.menu_file.setObjectName("menu_file")
        self.menu_help = QtWidgets.QMenu(self.menubar)
        self.menu_help.setObjectName("menu_help")
        Runner.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(Runner)
        self.statusbar.setObjectName("statusbar")
        Runner.setStatusBar(self.statusbar)
        self.action_save_project = QtWidgets.QAction(Runner)
        self.action_save_project.setObjectName("action_save_project")
        self.action_exit = QtWidgets.QAction(Runner)
        self.action_exit.setObjectName("action_exit")
        self.action_exit.triggered.connect(Runner.close)
        self.actionREADME = QtWidgets.QAction(Runner)
        self.actionREADME.setObjectName("actionREADME")
        self.menu_file.addAction(self.action_save_project)
        self.menu_file.addAction(self.action_exit)
        self.menu_help.addAction(self.actionREADME)
        self.menubar.addAction(self.menu_file.menuAction())
        self.menubar.addAction(self.menu_help.menuAction())

        self.retranslateUi(Runner)
        QtCore.QMetaObject.connectSlotsByName(Runner)


        # Actions to star
        self.display_observations()
        self.observation_list.itemClicked.connect(self.display_observation_content)
        disable_button(self.save_script_button)
        self.observation_output.textChanged.connect(self.enable_save_button)

    def enable_save_button(self):
        enable_button(self.save_script_button)

    def retranslateUi(self, Runner_GUI):
        _translate = QtCore.QCoreApplication.translate
        Runner_GUI.setWindowTitle(_translate("Runner_GUI", "ABS_Runner"))
        self.ECELd.setText(_translate("Runner_GUI", "Content:"))

        self.back_to_builder_button.setText(_translate("Runner_GUI","Back to Builder"))
        self.save_script_button.setText(_translate("Runner_GUI","Save Script"))
        self.play_button.setIcon(self.play_button.style().standardIcon(QtWidgets.QStyle.SP_MediaPlay))
        # self.stopButton.setIcon(self.stopButton.style().standardIcon(QtWidgets.QStyle.SP_MediaStop))
        self.ABS.setText(_translate("Runner_GUI", "Observations / User Actions:"))
        # self.pauseButton.setIcon(self.pauseButton.style().standardIcon(QtWidgets.QStyle.SP_MediaPause))
        self.menu_file.setTitle(_translate("Runner_GUI", "File"))
        self.menu_help.setTitle(_translate("Runner_GUI", "Help"))
        self.action_save_project.setText(_translate("Runner_GUI", "Save Project"))
        self.action_exit.setText(_translate("Runner_GUI", "Exit"))
        self.actionREADME.setText(_translate("Runner_GUI", "README"))

    
    def run_scripts(self):
        self.runner.hide()
        self.runner_manager.runner_review()
        self.runner.show()

    def display_observations(self):
        self.observation_list.clear()
        # For each relation add them to the relations display list
        for observation in self.observations:
            self.observation_list.addItem(observation.observation_name)

    def display_observation_content(self, item):
        observation = self.get_observation(item.text())

        if observation.user_action:
            self.display_script(observation)
            enable_button(self.save_script_button)
        
        else:
            self.observation_output.setText("No Content")
            self.observation_output.setEnabled(False)
            disable_button(self.save_script_button)


    def display_script(self, observation):
        path = "Project Data/" + self.controller_object.project_name + "/Runner/Scripts/user_action" + str(observation.user_action_number) + ".py"
        if os.path.exists(path):
            text = ''.join(open(path).readlines())
            self.observation_output.setText(text)
        self.observation_output.setEnabled(True)

    def save_script(self):
        text = self.observation_output.toPlainText()
        observation = self.get_observation(self.observation_list.currentItem().text())
        filename = "Project Data/" + self.controller_object.project_name + "/Runner/Scripts/user_action" + str(observation.user_action_number) + ".py"
        fname = open(filename, 'w')
        fname.write(str(text))
        fname.close()
        disable_button(self.save_script_button)
            

    def get_observation(self, text):
        for observation in self.observations:
            if text == observation.observation_name:
                return observation

    def back_to_builder(self):
        self.runner_manager.back_to_builder()
        self.close

    
    def play_runner(self):
        self.runner_manager.runner_review()

    def execute(self):
        app = QtWidgets.QApplication(sys.argv)
        RunnerWindow = QtWidgets.QMainWindow()
        self.setupUi(RunnerWindow)
        RunnerWindow.show()
        sys.exit(app.exec_())


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Runner = QtWidgets.QMainWindow()
    ui = Runner_GUI()
    ui.setupUi(Runner)
    Runner.show()
    sys.exit(app.exec_())
