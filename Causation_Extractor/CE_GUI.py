# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'CE_GUI.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QMainWindow
from Analysis_GUI import Ui_Analyzing_Window
import time

class Ui_CEWindow(QMainWindow):
    def setupUi(self, CEWindow):
        self.text = ""
        CEWindow.setObjectName("CEWindow")
        CEWindow.resize(689, 230)
        CEWindow.setStyleSheet("background-color: white;")
        self.centralwidget = QtWidgets.QWidget(CEWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.Browse_Button = QtWidgets.QPushButton(self.centralwidget)
        self.Browse_Button.setGeometry(QtCore.QRect(110, 70, 121, 31))
        font = QtGui.QFont()
        font.setFamily("MS Sans Serif")
        font.setPointSize(15)
        self.Browse_Button.setFont(font)
        self.Browse_Button.setStyleSheet("background-color: #13333F; color: #FFFFFF; border-radius: 5px;")
        self.Browse_Button.setObjectName("Browse_Button")
        self.Browse_Button.clicked.connect(self.browseFiles)

        self.fileName = QtWidgets.QLineEdit(self.centralwidget)
        self.fileName.setGeometry(QtCore.QRect(230, 70, 351, 31))
        self.fileName.setReadOnly(True)
        self.fileName.setObjectName("fileName")
        self.fileName.setFont(font)
        self.fileName.setStyleSheet("color: black")
        self.Analyze_Button = QtWidgets.QPushButton(self.centralwidget)
        self.Analyze_Button.setGeometry(QtCore.QRect(280, 130, 121, 31))

        self.Analyze_Button.setFont(font)
        self.Analyze_Button.setStyleSheet("background-color: #13333F; color: #FFFFFF; border-radius: 5px;")
        self.Analyze_Button.setObjectName("Analyze_Button")
        self.Analyze_Button.clicked.connect(self.show_analyzingWindow)

        CEWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(CEWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 689, 21))
        self.menubar.setObjectName("menubar")
        CEWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(CEWindow)
        self.statusbar.setObjectName("statusbar")
        CEWindow.setStatusBar(self.statusbar)

        self.retranslateUi(CEWindow)
        QtCore.QMetaObject.connectSlotsByName(CEWindow)

    ######################  BROWSE BUTTON FUNCTION ###############
    def browseFiles(self):
        name = QFileDialog.getOpenFileName(self.Browse_Button, 'Open file', 'c:\\')
        file = open(name[0], 'r')
        self.num_lines = self.count_lines(name[0])
        with file:
            self.text = file.read()
            self.fileName.setText(name[0])
        file.close()

    def count_lines(self,filename):
        num_lines = sum(1 for line in open(filename,'r'))
        return num_lines
    ####################    ANALYSIS WINDOW POPUP  ####################################

    def show_analyzingWindow(self):
        self.hide()
        self.Analyzing_Window = QtWidgets.QDialog()
        self.ui = Ui_Analyzing_Window()
        self.ui.setupUi(self.Analyzing_Window)
        self.ui.progressBar_update(self.num_lines)
        self.Analyzing_Window.show()

    ##############################################################################

    def retranslateUi(self, CEWindow):
        _translate = QtCore.QCoreApplication.translate
        CEWindow.setWindowTitle(_translate("CEWindow", "Causation Extractor"))
        self.Browse_Button.setText(_translate("CEWindow", "Browse"))
        self.Analyze_Button.setText(_translate("CEWindow", "Analyze"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    CEWindow = QtWidgets.QMainWindow()
    ui = Ui_CEWindow()
    ui.setupUi(CEWindow)
    CEWindow.show()
    sys.exit(app.exec_())
